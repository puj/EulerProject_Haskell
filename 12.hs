{--
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1 
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
--}

import Control.Monad.Instances
import Data.List 
import Debug.Trace

{--
Recursively creates a list of the prime
factors for a given number
16 = [2,2,2,2]
36 = [2,2,3,3]
--}
getDivisorsDecomp 1 = []
getDivisorsDecomp n =
	let firstFactor = head ( take 1 
		[x | x <- dropWhile (\y -> n `mod` y /= 0) [2..]]
	)
	in concat [[firstFactor], getDivisorsDecomp (n `div` firstFactor)]

{--
Number of divisors is calculated using the 
exponents of the prime factor decomp

The exponent is calculated by grouping the
prime factors, counting them, and finding the 
product of the counts
--}
numDivisorsDecomp n =  foldr (\x y -> (x+1)*(y)) 1 (
		map 
			length
			((group (getDivisorsDecomp n)))
		)

{--
Helper functions to get more triangle numbers
from indices
--}
getTriangleNumbers s n = [ ((x*(x+1)) `div` 2) | x <- [s..n]] 
getTriangleNumber n = ((n*(n+1)) `div` 2)

{--
This gets the index of the first triangle number
which exceeds the number of factors specified
--}
getIndexOfTriangleNumber n = (==) . maximum >>= filter $ 
	[x | x <- takeWhile 
		(\y -> numDivisorsDecomp (getTriangleNumber y) <= n ) [2..]
	]

{--
First get the index of the first triangle number which 
has a number of factors greater than numFactors
--}
problem11 numFactors = 
	let index = getIndexOfTriangleNumber (numFactors)
	in (
		(head index)+1,
		getTriangleNumber $ (head index)+1,
		numDivisorsDecomp $ getTriangleNumber  $ head (index)+1
		)
	
		
{--
Answer to 500: 76576500, which has 576 factors
And is the 12375th triangular number

I suppose I should learn why the pattern xyzxyz00 emerges often
In this problem
--}
main = do print (problem11 500)